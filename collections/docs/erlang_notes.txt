
Chapter 2. Getting Started

2.6 Variables

Erlang has single assignment variables. As the name suggests, single assignment
variables can be given a value only once. A variable that has had a value
assigned to it is called a bound variable; otherwise, it is called an unbound
variable. All variable start off unbound.

In Erlang, however, = denotes a pattern matching operation.

2.8 Atoms

In Erlang, atoms are used to represent different non-numerical constant values.

2.9 Tuples

You can create a tuple by enclosing the values you want to represent in curly
bracket and separating them with commas.

X = { 10, 45 }

2.10 Lists

We create a list by enclosing the list elements in sequare brackets and
separating them with commas.

ThingsToBuy = [ {apples, 10}, {pears, 6}, {milk, 3} ].

2.11 Strings

Strickly speaking, there are no strings in Erlang. Strings are really just lists
of integers. Strings are enclosed in double quotation marks(').

Chapter 3. Sequential Programming

3.1 Modules

Modules are the basic unit of code in Erlang. Modules are stored in files with
.erl extensions.

Where Has My Code Gone ?

You have to make sure that when you run the compiler from the shell, you are in
the right directory so that the system can find your code. If you are running on
a system with a command shell, then you should change direcories to the
directory where your code is before trying to compile the example code.

In the shell, "pwd()." echo the current directory to find source files, and "cd"
to change the directory.

3.3 Functions with the same Name and Different Arity

The arity of a function is the number of arguments that the function has. In
Erlang, two functions with the same name and different arity in the same module
represent entirely different functions.

3.4 Funs

Funs are "anonymous" functions: Z=fun(X) -> 2*X end. which "fun" is a keyword.

Functions that return funs, or functions that can accept funs as their
arguments, are called higher-order functions.

3.6 List Comprehensions

List comprehensions are expressions that create lists without having to use
funs, maps, or filters.

The notation [F(X) || X <- L] means "the list of F(X) where X is taken from the
list L".

3.8 Guards

Guards are constructs that we can use to increase the power of pattern
matching.

some_fun(X) when some_expression -> ...

A guard sequence is either a single guard or a series of guards, separated by
semicolons (;). A guard is a series of guard expressions, separated by
commas(,).

3.9 Records

-record( Name, { key1 = Default1, key2, ... } ).

3.10 case and if Expressions

Sometimes defining separate function clauses for everything is rather
inconverient. When this happens we can use case and if expressions.

Syntax:
case Expression of
	Pattern1 [when Guard1] -> Expr_seq1;
	Pattern2 [when Guard2] -> Expr_seq2;
	...
end

if 
	Guard1 ->
		Expr_seq1;
	Guard2 ->
		Expr_seq2;
	...
end

Chapter 4. Exceptions

4.1 Exceptions

Exceptions are raised by the system when internal errors are encountered or
explicitly in code by calling throw(Exception), exit(Exception), or
erlang:error(Exception).

Erlang has two methods of catching an exceptions. One is to enclose the call to
the function, which raised the exception within a try...catch expression. The
other is to enclose the call in a catch expression.

...

Chapter 5. Advanced Sequential Programming

Binaries: This is a data type that we use to store raw chunks of memory in an
efficient mannuer.

The bit syntax: This is a pattern matching syntax used for packing and unpacking
bit fields from binaries.

5.2 Binaries

Binaries are written and printed as sequences of integers or strings, enclosed
in double less-than and greater-than brackets.

When you use integers in a binary, each must be in the range 0 to 255.

We can build a binary and extract the elements of a binary using a BIF, or we
can use the bit syntax.

5.3 The Bit Syntax

M = << X:3, Y:7, Z:6>>
Bit syntax expressions are of the following form:
<<>>
<<E1, E2, ..., En>>
Each element Ei specifies a single segment of the binary. Each element Ei can
have one of four possible forms:
Ei = Value |
	 Value:Size |
	 Value/TypeSpecifierList |
	 Value:Size/TypeSpecifierList

Whatever form you use, the total number of bits in the binary must be evenly
divisible by 8.

5.4 Miscellaneous Short Topics

The BIF apply(Mod, Func, [Arg1, Arg2, ..., ArgN] ) applies the function Func in
the module Mod to the arguments Arg1, Arg2, ..., ArgN. What makes it different
from calling the function directly is that the module name and/or the function
name can be computed dynamically.

Module attributes have the syntax -AtomTag(...) and are used to define certain
properties of a file. There are two types of module attributes: predefined and
user-defined.

You can use block expressions to group a sequence of expressions, similar to a
clause body. The value of a begin...end block is the value of the last
expression in the block.
	begin
		Expr1,
		...
		ExprN
	end

Erlang source code files are assumed to be encoded in the ISO-8859-l character
set.

Comments in Erlang start with a percent character(%) and extend to the end of
line. There are no block comments.

In Erlang, anything that can be evaluated to produce a value is called an
expression. Expression sequences are sequences of expressions separated by
commas. The value of the expression sequence E1, E2, ..., En is defined to be
the value of the last expression in the sequence.

++and -- are infix operators for list addition and subtraction. A ++ B adds
(that is, appends) A and B. A -- B subtracts the list B from the list A.
Subtraction means that every element in B is removed from A.

Chapter 7. Concurrency

Erlang programs are made of process. These processes can send messages to each
other. Pairs of processes can be linked together. If one process in a linked
pair dies, the other process in the pair will be sent a message containing the
reason why the first process died.

Chapter 8. Concurrent Programming

In Erlang, processes belong to the programming language and NOT the operating
system.

In Erlang, processes share no memory and are completely independent. The only
way for processes to interact is through message passing.

In Erlang, programming with processes is easy. It just needs three new
primitives: spawn, send, and receive.

8.1 The Concurrency Primitives

Pid = spawn( Fun ), create a new concurrent process.

Pid ! Message, send message to the process with identifier Pid. Message sending
is asynchronous. ! is called the send operator.

receive...end, receive a message that has been sent to process.

8.6 Selective Receive

So far we have glossed over exactly how send and receive work. send does not
actually send a message to a process. Instead, send sends a message to the
mailbox of the process, and receive tries to remove a message from the mailbox.

8.7 Registered Processes

Erlang has a method for publishing a process identifier that any process in the
system can communicate with this process. Such a process is called a registered
process. 

register( AnAtom, Pid ), unregister( AnAtom ), whereis( AnAtom ) -> Pid |
undefined.

8.10 Spawning With MFAs

spawn( Mod, FuncName, Args )

Spawning a function with an explicit module, function name, and argument
list( called an MFA ) is the proper way to ensure that our running processes
will be correctly updated with new versions of the module code if it is compiled
while it is being used.

Chapter 9. Errors in Concurrent Programs

9.1 Linking Processes

The link was made when one of the processes called the BIF link(P), with P being
the PID of the other process. Once linked, the two processes will implicitly
monitor each other.

9.2 An on_exit Handler

The statement process_flag(trap_exit, true) turns the spawned process into a
system process.

9.4 The Details of Error Handling

A link is something that defines an error progagation path between two
processes. If two processes are linked together and one of the processes dies,
then an exit signal will be sent to the other process.

An exit signal is something generated by a process when the process dies. The
signal is broadcast to all processes that are in the link set of the dying
process. 

When a process receives a non-normal exit signal, it too will die unless it is
special kind of process called a system process.

Chapter 10. Distributed Programming

Distributed programs are programs that are designed to run on networks of
computers and that can coordinate their activities only by message passing.

In this book we'll talk about two main models of distribution: Distributed
Erlang, Socket-based distribution.

10.1 The Name Server(A sample)

A name server is a program that, given a name, returns a value associated with
that name.

The argument -sname gandalf( argument for erl ) means "start an Erlang node with
name gandalf on the local host".

rpc:call( Node, Mod, Func, [Arg1, Arg2, ..., ArgN] ) performs a remote procedure
call on Node. The function to be called is Mod:Func( Arg1, Arg2, ..., ArgN ).

We can also use -sname on two different machines when they are on the same
subnet. Using -sname is also the only method that will work if no DNF service is
avaiable. ( -sname represents shot name )

Ensure that both nodes have the same cookie.

10.2 The Distribution Primitives

The central concept in distributed Erlang is the node. A node is a
selfcontained Erlang system containing a complete virtual machine with its own
address space and own set of processes.

Access to a single node or set of nodes is secured by a cookie system. Each node
has a single cookie, and this cookie must be the same as the cookies of any
nodes to which the node talks.

Chapter 12. Interfacing Techniques

The Erlang side of the communication is controlled by an Erlang port. The
process that creates a port is called the connected process for that port.

12.1 Ports

Port = open_port( PortName, PortSettings )


