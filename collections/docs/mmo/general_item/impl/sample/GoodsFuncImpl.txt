10.19.2010

针对星尘物品模块的功能实现：

一、脚本物品创建

工厂创建物品 -> 逐个添加到玩家背包 -> 检查是否可叠加 -> 若主背包无法添加，则在子
背包中查找位置 -> 若均不能添加，则掉落到场景上 -> 编码物品信息给客户端 -> 设置存
档标志。

编码客户端消息格式：
MSG_S2C_CONTAINER_OBJECT_MOVE
OT_NEW_OBJECT
srcContainerType(0)
srcContainerID(0)
srcExtID(0)
srcPos(0)
destContainerType(TYPE_PLAYER)
destContainerID(playerID)
destExtID(PEI_PACKET)
destPos(posInContainer)
srcObjType(0)
srcObjID(0)
srcObjAmount(0)
destObjType(TYPE_GOODS)
destObjID
destObjAmount
objStream

叠加到已有物品的消息格式：
MSG_S2C_CONTAINER_OBJECT_AMOUNT_CHANGE
srcContainerType(TYPE_PLAYER)
srcContainerID
srcExtID(PEI_PACKET)
srcPos
objType
objID
objAmount

移动到空位置的消息格式：
OT_MOVE_OBJECT
srcContainerType(TYPE_PLAYER)
srcContainerID(playerID)
srcExtID(PEI_PACKET)
srcPos(pos before move)
destContainerType(TYPE_PLAYER)
destContainerID(playerID)
destExtID(PEI_PACKET)
destPos(pos after move)
srcObjType(TYPE_GOODS)
srcObjID(goodsID)
srcObjAmount(goodsCnt)
destObjType(TYPE_GOODS)
destObjID(goodsID same as srcObjID)
destObjAmount(goodsCnt)

交换物品消息格式：
OT_SWITCH_OBJECT
srcContainerType(TYPE_PLAYER)
srcContainerID(playerID)
srcExtID(PEI_PACKET)
srcPos(pos)
destContainerType(TYPE_PLAYER)
destContainerID(playerID)
destExtID(PEI_PACKET)
destPos(posInContainer)
srcObjType(TYPE_GOODS)
srcObjID(goodsID) 交换后的物品ID
srcObjAmount(goodsCnt) 交换后的物品数量
destObjType(TYPE_GOODS)
destObjID(goodsID) 客户端操作的物品
destObjAmount(goodsCnt)

从场景拾取相同物品叠加到玩家背包消息格式：
OT_MOVE_OBJECT
srcContainerType(TYPE_REGION)
srcContainerID(regionID)
srcExtID(0)
srcPos(pos)
destContainerType(TYPE_PLAYER)
destContainerID(playerID)
destExtID(PEI_PACKET)
destPos(posInContainer)
srcObjType(TYPE_GOODS)
srcObjID(region goodsID)
srcObjAmount(goodsCnt)
destObjType(TYPE_GOODS)
destObjID(packet goodsID)
destObjAmount(new Cnt)

要交换物品A和B，客户端发来的消息中，A作为源B作为目标，交换后服务器返回的消息中，
A则作为目标，B则为源。

二、处理客户端的消息

消息格式：
srcContainerType
srcContainerID
srcExtID
srcPos
destContainerType
destContainerID
destExtID
destPos
objType
objID
objAmount

[
struct Operator
{
    uchar type;
    uchar extType;
};
struct Key
{
    Operator src, dest;
};
]

通过源/目标信息的唯一组合，确定其逻辑处理函数。

三、处理客户端移动请求

1、移动的目标位置是空的：直接放置

2、目标位置有相同类型物品：a)超过叠加：交换位置；b)未超过叠加：叠加合并

3、目标位置有不同类型物品：交换位置

4、移动数量(objAmount)小于要移动的物品叠加数（拆分）：objAmount表示拆分出的数量
，destPos拆分出的物品放置的位置，如果目标位置有不同物品，则拆分失败；如果目标位
置有相同物品且叠加和不超过上限，则叠加，否则失败。


可简单处理为拆分后的放置位置必须为空才能拆分。

物品容器有：

主背包、装备栏、勋章栏、子背包栏、子背包1-5、金币栏、银币栏、
主仓库、子仓库栏、子仓库1-4、仓库金币栏、仓库银币栏
会话、场景

[
单个容器内：移动物品、拆分物品（指定拆分目标位置）
容器间：整个移动、部分移动（源拆分，移动到新位置）
]


容器支持的操作：
容器内：移动、全合并、新位置拆分、交换、部分合并
容器间：移动、全合并、新位置拆分、交换、部分合并


子背包及子背包栏位：
当子背包内有物品时，该子背包不能作为源操作物品。当源操作物品也是子背包，且其容量
足以容纳目标子背包内已装物品时，就能被交换。

上面的交换操作，不限定源子背包的位置。

子背包栏位也可以被视为一种容器，它有有限的格子，且只允许放置子背包内物品。当一个
子背包物品被放置于子背包栏位上时，该子背包将被绑定一个格子容器。

子背包栏位容器支持的操作：
移动（其他容器移动子背包物品进来）、内部移动（容器内移动）、交换（与外部容器交换
子背包）、内部交换（容器内交换）

不支持拆分、合并，格子上的物品（子背包物品）不能叠加。

对于交换子背包的操作，需要将物品被重新排列后的格子信息发送给客户端。

-------
对于格子容器针对物品的操作包括：
容器内操作：
移动，改变物品位置
部分移动，创建物品、改变物品数量、设置物品位置
交换，改变物品位置
合并，改变物品数量、删除物品
部分合并，改变物品数量
容器间操作：
移动，移除物品、添加物品、改变物品位置
部分移动，添加物品、改变物品数量、创建物品、设置物品位置
交换，添加物品、移除物品、改变物品位置
合并，删除物品、改变物品数量
部分合并，改变物品数量

