MMO排队模块设计
===================

..Author: Kevin Lynx
..Date: 3.17.2011

目标
------

排队模块在一个完整的MMO服务器中可能会被多个地方使用，本文力求设计一个相对独立、
可复用的服务器端组件。该模块预计的特性包括：

* 抽象各个排队功能，能够容易地被复用

* 相对独立，模块分层，可作为单独进程存在，亦可作为一个库被使用

* 独立于服务器的代码实现

排队功能需求
-------------

MMO服务器中的排队需求可能包括：

* 玩家登陆进入游戏：客户端由排队模块决定是否可进入登录验证流程

* 游戏逻辑功能：玩家在游戏活动期间由排队模块决定是否可进入活动游戏服务器

实现TIPS
----------

排队模块无法使用“剩余时间”来作为排队等待的单位衡量，因为排队等待的操作并非必定
会在一定时间后完成。例如排队进入游戏服务器，只有当服务器内有其他玩家退出时，这个
等待的玩家才能进入，这个等待的时间无法确定。所以，可以使用当前排队位置作为等待的
单位衡量。

排队主要是用于协调客户端有秩序地进入一个服务器。对于在一个服务器上的某个逻辑功能
排队，似乎没有必要。

整个排队模块分为两层软件层：

* 逻辑功能层，负责排队管理本身

* 基于逻辑层的单独进程包装，用于单独进程的分离

在跨服务器排队中（实际上本文只讨论跨服务器排队），客户端应该主动连接排队模块，排
队模块分配进入令牌（标识用户排队信息）。当排队模块得到目标服务器的可处理通知时，
排队模块处理当前队首用户，主要是通知客户端。客户端收到通知后主动连接目标服务器，
目标服务器再到排队模块上去检测该用户是否合法::

    C  --->  QS 
             QS  <--- GS
    C <---   QS
    C --------------> GS
             QS  <--- GS
             QS  ---> GS

这里的QS不一定是一个物理上的独立服务器，它可以是集成了排队模块的其他服务器，例如
验证服务器，也可以是游戏服务器。

针对排队流程的一些网络协议，可考虑使用文本协议，如XML。尤其在服务器之间的通信，
因为网络带宽不是问题，完全可使用文本协议。使用文本协议的好处可以提高版本之间的兼
容性。

MORE DETAILS
---------------

排队模块内部维护若干个排队队列，每个队列有个操作属性，表示该队列上的玩家正排队等
待做的事情。当目标服务器开始这个服务（操作）时，就告诉排队模块，排队模块新建队列
，开始管理该服务器的排队情况。这个通信可大致描述为::

    <Queue>
        <Serve>
            <Name>LoginGame</Name>
            <Op>Start</Op>
        </Serve>
    </Queue>

游戏客户端连接排队服务器时，发送自己希望得到服务的操作名。QS做验证，生成排队标识
，然后将客户端放入排队队列。同时返回一个排队信息给客户端，排队信息包括提示信息以
及将来在目标服务器上验证的排队标识。

目标服务器每次可以继续服务的时候，都告诉排队服务器::

    <Queue>
        <Serve>
            <Name>LoginGame</Name>
            <Op>Continue</Op>
        </Server>
    </Queue>

排队服务器告诉队首客户端，可以连接目标服务器。队首客户端发送排队标识给目标服务器
，目标服务器到排队服务器上验证此标识。验证成功则开始对该客户端进行服务。

与此同时，排队服务器告诉其他等待的客户端当前所在队列位置。

当目标服务器关闭某个服务时，则告诉排队服务器关闭此排队管理。

当客户端取消排队时，目标服务器将该客户端所在的排队队列更新。

进入验证
-----------

上文中提到了“排队标识”，标识问题主要用于解决目标服务器对客户端进行是否排过队的
验证。如果采用最原始的方法，即：当目标服务器收到客户端连接时，则询问排队服务器该
用户是否已排过队。排队服务器自通知某个客户端可以连接目标服务器后，就保存这个客户
端信息一段时间。

如果使用这种方式，排队标识存在的意义不大，完全可以直接使用客户端的登录用户名。

就算有验证机制可以让目标服务器和排队服务器不用通信，所省下的资源也不大必要。因为
在整个服务过程中，目标服务器始终会不间断地与排队服务器通信，告之可以继续服务。


