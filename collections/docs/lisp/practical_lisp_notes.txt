
Chapter 3 (Syntax and Semantics)

Common Lisp defines a couple dozen so-called special operators. There are 25 in
all, but only a small handful are used directly in day-to-day programming.

When the first element of a list is a symbol naming a special operator, the rest
of the expressions are evaluated accroding to the rule for that operator.

The evaluation of a macro form proceeds in two phases: First, the elements of
 the macro form are passed, unevaluated, to the macro function. Second, the form
 returned by the macro function-called its expansion-is evaluated according to
    the normal evlauation rules.

The symbol nil is the only false value, and everything else is true.

Finally, comments should be prefaced with one to four semicolons depending on
 the scope of the comments as follows:

;;;; Four semicolons are used for a file header comment.

;;; A comment with three semicolons will usually be a paragraph
;;; comment that applies to a large section of code that follows,

(defun foo (x)
  (dotimes (i x)
    ;; Two semicolons indicate this comment applies to the code
    ;; that follows. Note that this comment is indented the same
    ;; as the code that follows.
    (some-function-call)
    (another i)              ; this comment applies to this line only
    (and-another)            ; and this is for this line
    (baz)))


Chapter 14 (Files and File I/O)

    (let ((in (open "/some/name.txt")))
        (format t "~a~%" (read-line in))
        (close in))

read-char: reads a single character
read-line: reads a line of text, returning it as a string with the end-of-line
    character(s) removed
read: reads a single s-expression, returning a Lisp object.
read-byte: return an integer between 0 and 255 each time it's called.

By default OPEN returns character streams, which translate the underlying bytes
to characters according to a particular character-encoding scheme.

To write data to a file, you need an output stream, which you obtain by calling
OPEN with a :direction keyword argument of :output.
    
    (open "name.txt" :direction :output :if-exists :supersede)

write-char:
write-line: writes a string followed by a newline
write-string: writes a string without adding any end-of-line characters
terpri: (terminate print), unconditionally prints a newline character
fresh-line: prints a newline character unless the stream is at the beginning of
a line.
print: prints s-expressions 
prin1:
pprint:
princ: print Lisp objects, but in a way designed for human consumption.

Common Lisp provides a macro, with-open-file, built on top of unwind-protect, to
encapsulate this pattern (me: make sure the file will be closed)

    (with-open-file (stream-var open-argument*)
       body-form*)

So far you've used strings to represent filenames. However, using strings as
    filenams ties your code to a particular operating system and file system.

TO avoid this kind of nonportability, Common Lisp provides another
 representation of filenames: pathname objects.

For instance, to translate a namestring to a pathname, you use the PATHNAME
function. You can examine these individual components of a pathname with the
functions PATHNAME-DIRECTORY, PATHNAME-NAME, and PATHNAME-TYPE.

    (setf p (pathname "/foo/bar/barz.txt"))
    (pathname-type p) => "txt"

Three other functions PATHNAME-HOST, PATHNAME-DEVICE, and PATHNAME-VERSION allow
you to get the other three pathname compoents.

You can construct arbitrary pathnames using the MAKE-PATHNAME function.
    
    (make-pathname
        :directory '(:absolute "foo" "bar")
        :name "baz"
        :type "txt")

Rather than making names from scatch, you can build a new pathname based on an
existing pathname with MAKE-PATHNAME's keyword parameter :defaults.

    (make-pathname :directory '(:relative "backups") :defaults input-file)


TODO: finish read this chapter

Chapter 15

To allow you to do so without totally destroying the portability of your code,
 Common Lisp provides a mechanism, called read-time conditionalization, that
 allows you to conditionally include code based on various features such as what
 implementation it's being run in.

The mechanism consists of a variable *FEATURES* and two extra bits of syntax
understood by the Lisp reader.

The reader uses feature expressions in conjunction with two bits of syntax, #+
and #-. When a feature expression following a #+ is true, the reader reads the
next expression normally. Otherwise it skips the next expression.

	(defun foo()
	 	#+allegro (do-one-thing)
	 	#+sbcl (do-another-thing)
		#-(or allegro sbcl) (error "Not implemented"))

Chapter 19 (Beyond Exception Handling: Conditions and Restarts)

One of Lisp's great features is its condition system. It servers a similar
purpose to the exception handling systems in Java, Python, and C++ but is more
flexible.

The condition system splits the responsibilities into three parts--signaling a
condition, handling it, and restarting.

A condition is an object whose class indicates the general nature of the
condition and whose instance data carries information about the details of the
particular circumstances that lead to the condition being signaled.

Condition classes are defined with the DEFINE-CONDITION macro, which works
essentially the same as DEFCLASS except that the default superclass of classes
defined with DEFINE-CONDITION is CONDITION rather than STANDARD_OBJECT.

New condition objects are created with MAKE-CONDITION rather than MAKE-INSTANCE.

When using the condition system for error handling, you should define your
conditions as subclasses of ERROR, a subclass of CONDITION.

    (define-condition malformed-log-entry-error (error)
      ((text :initarg :text :reader text)))

You signal errors with the function ERROR, which calls the lower-level function
SIGNAL and drops into the debugger if the condition isn't handled.

    (error 'malformed-log-entry-error :text text)

When a condition is signaled, the signaling machinery finds the most recently
setablished handler whose type specifier is compatiable with the condition being
signaled and calls its function, passing it the condition object.

The macro HANDLER-CASE establishes this kind of condition handler. The basic
form of a HANDLER-CASE is as follows:

    (handler-case expression
      error-clause*)

where each error-clause is of the following form:

    (condition-type ([var]) code)

i.e:

    (handler-case (parse-log-entry text)
      (malformed-log-entry-error () nil))

To change parse-log-file so it establishes a restart instead of a condition
handler, you can change the HANDLER-CASE to a RESTART-CASE.

    (handler-bind (binding*) form*)

where each binding is a list of a condition type and a handler function of one
argument.

A more important difference between HANDLER-BIND and HANDLER-CASE is that the
handler function bound by HANDLER-BIND will be run without unwinding the
stack--the flow of control will still be in the call to parse-log-entry when
this function is called.

The call to INVOKE_RESTART will find and invoke the most recently bound restart
with the given name.

    (handler-bind ((malformed-log-entry-error 
                    #'(lambda (c)
                        (invoke-restart 'skip-log-entry)))))

(another tutorial: http://chaitanyagupta.com/lisp/restarts.html)

Chapter 22 (Loop for Black Belts)

The basic structure of a LOOP is a set of clauses, each of which begins with a
loop keyword.

Most of the so-called iteration control clauses start with the loop keyword for,
 or its synonym as, followed by the name of a variable.

A single loop can have multiple for clauses with each clause naming its own
variable. When a loop has multiple for clauses, the loop terminates as soon as
any for clause reaches its end condition.

    (loop
        for item in list
        for i from 1 to 10
        do (something))

will iterate at most ten times but may stop sooner if list contains fewer than
ten items.

These clauses consist of from one to three of the following prepositional
phrases after the for(or as) the from where phrase, the to where phrase, and the
by how much phrase.

    (loop for i from 0 upto 10 by 2 collect i)

from where phrases: from downfrom upfrom
to where phrases: upto below downto above

The for clauses for iterating over lists are much simpler than the arithmetic
clauses. They support only two prepositional phrases, in and on.

    (loop for i in (list 10 20 30 40) collect i) => (10 20 30 40)
    (loop for i on (list 10 20 30) collect i) => ((10 20 30) (20 30) (30))

Looping over the elements of a vector is similar to looping over the elements of
a list, except the preposition across is used instead of in.

    (loop for x across "abcd" collect x) => (#\a#\b#\c#\d)

If none of the other for clauses supports exactly the form of variable stepping
you need, you can take complete control over stepping with an equals-then
clause.

    (loop for var = initial-value-form [ then step-form] ...)

In each subsequent iteration, step-form is evaluated, and its value becomes the
new value of var. With no then part to the clause, the initial-value-form is
reevaluated on each iteration to provide the new value.

The step-form can refer to other loop variables, including variables created by
other for clauses later in the loop.

    (loop repeat 5
        for x = 0 then y
        for y = 1 then (+ x y)
        collect y) => (1 2 4 8 16)

While the main variables needed within a loop are usually declared implicitly in
for clauses, sometimes you'll need auxiliary variables, which you can declare
with with clauses.

    with var [=value-form]

TODO: finish read this chapter


