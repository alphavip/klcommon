
4.1.2011

#

    (defgeneric )

#

As make-instance accept a symbol to create an object, so we can create an object
dynamicaly:

    (make-instance (get-class-name))
    (defun get-class-name () 'class)


3.29.2011

#

    (format nil "~2d" 1) => " 1"
    (format nil "~2,'0d" 1) => "01"

The first prefix parameter (i.e, 2) can specify a minimum width for the output,
 and the second parameter (i.e, ",'0") can specify a padding character to use.

3.28.2011

#

Some UTF-8 file starts a mark string: EF BB BF. But not all UTF-8 file contain
this. And Lisp read-char/peek-char can detect this automatically.

    (peek-char nil stream nil nil) => #\ZERO_WIDTH_NO-BREAK_SPACE

#

Common Lisp use '#x' or '#16r' to indicate a hex number, i.e:

    #xFF => 255
    #16rFF => 255


#

position/position-if/position-if-not returns the index within sequence of the
leftmost(if from-end is true) or rightmost(if from-end is false) position.

    (position #\a "baobab") => 1
    (position #\a "baobab" :from-end t) => 4

3.27.2011

#

The difference between :|title| and :title is, symbols defined in '|' character
keep its original, i mean:

    (symbol-name :|title|) => "title"
    (symbol-name :title) => "TITLE"


3.25.2011

#

Install hunchentoot http server is not very hard actully, follow the
hunchentoot.asd depends, use quicklisp to install these dependent libraries like 

    (ql:quickload :chunga)

And then:

    (asdf:load-system :hunchentoot)

DONE.

#

To get started with hunchentoot, there're some tutorials like:

    <Implement a blog in Common Lisp>:
        http://roeim.net/vetle/docs/cl-webapp-intro/

3.23.2011

#

    (cons (list 1 2) (list 3 4)) => ((1 2) 3 4)
    (length (cons (list 1 2) (list 3 4))) => 3

3.15.2011

#

To trace a function call:
    (trace foo)
    (untrace foo)
    
To print the backtrace(call stack):
    :backtrace (typed when error occured)

#

    (defun testfn (arg) 
      (declare (ignore arg))
      ())

declare this function will ignore the argument 'arg', to avoid compiler
warnings.

#

    (loop (exp1) (exp2)) will loop infinite until explicit return.
    (let ((a 0))
      (loop
         (princ a)
         (incf a)
         (if (> a 5) return)))
    
#

    (loop for (key value) in '((a b) (c d)) 
      do (princ key)
         (princ value))

3.10.2011

#

Config SBCL (to has command history):
1. Download quicklisp (http://beta.quicklisp.org/quicklisp.lisp)
2. SBCL --load quicklisp.lisp (be sure SBCL can find quicklisp.lisp)
3. (quicklisp-quickstart:install)
4. (ql:add-to-init-file)  write config in ~/.sbclrc
5. install OSICAT required by linedit (ql:quickload "osicat")
6. install linedit (ql:quickload "linedit")
7. add config to ~/.sbclrc:

    (require :asdf)
    (if (member "--no-linedit" sb-ext:*posix-argv* :test 'equal)
      (setf sb-ext:*posix-argv* 
            (remove "--no-linedit" sb-ext:*posix-argv* :test 'equal))
      (when (interactive-stream-p *terminal-io*)
        (require :osicat)
        (require :sb-aclrepl)
        (require :linedit)
        (funcall (intern "INSTALL-REPL" :linedit) :wrap-current t)))


#

We can use type-of to retrieve a symbol type:

    (type-of var)

3.8.2011

#

(defparameter *tmp-dir*
              #+(or :win32 :mswindows :windows) "c:\\tmp\\"
              #-(or :win32 :mswindows :windows) "/tmp/")

#

#+:allegro (require :osi)
#+:sbcl (require :sb-executable)
#+:sbcl (require :sb-posix)

3.5.2011

#

Install asdf in clisp(http://common-lisp.net/project/asdf/asdf.lisp):

    (load "xxx/asdf.lisp") 

Install libraries defined by asdf:

    (asdf:load-system :cl-ppcre)

Add search path to asdf:

    (push "path" asdf:*central-registry*)

#

Use ';' to place a line comment, '#|' and '|#' to place a block comemnt

#

subseq retrieve a sub string:

    (setf s "class name")
    (subseq s 1 3)

(char string i) returns the ith character of string.

#

defconstant name inital-value

define a constant variable.


3.4.2011

#

The ~:[fail~;pass~] part of the FORMAT directive causes FORMAT to print "fail" 
if the first argument is false and "pass" otherwise.
    
    (format t "~:[fail~;pass~]" (< 1 2))

#

Whenever you want to treat code as data, that's a sure sign you need a macro.

3.3.2011

#

You can create a property list with the same LIST function as you use to create
other lists.

    (list :a 1 :b 2 :c 3)
    (getf (list :a 1 :b 2 :c 3) :c)

#

The asterisks(*) in the name are a Lisp naming convention for global variables.

    (defvar *db* nil)

#

macro push, push item place, prepends item to the list that is stored in place,
 stores the resulting list in place, and returns the list.

#

When FORMAT sees ~{ the next argument to be consumed must be a list. FORMAT
  loops that list, processing the directives between the ~{ and ~}, consuming as
many elements of the list as needed each time through the list.

    (format t "~{~a~}" '(a b c))

#

The with-open-file macro opens a file,  binds the stream to a variable, executes
a set of expressions, and then close the file.

    (with-open-file (out filename
                     :direction :output
                     :if-exists :supersede)
        (with-standard-io-syntax
            (print *db* out)))

#

When we call a function which has keyword parameters, we must write :parameter,
no more spaces between ':' and parameter.

#

    (defun testfn (&key (name "abc" name-p))
        (values name name-p))

If we pass name parameter, name-p will be T, otherwise it will be nil.

2.28.2011

#

defvar is similar to defparameter, which establish name as a dynamic variable.

    (defvar *var-name*)
    (defvar *var-name* 1)

Note: the character '*' is a part of the symbol:
    
    (values *var-name*)

#

We can use (load "filename") in clisp to load a lisp code file, and then we can
call these functions defined in that file.

#

Unlike macro in C, macro in Lisp is much more like a function:


    (defmacro as (tag content)
        `(format t "<~(~A~)>~A</~(~A~)>"
                   ',tag ,content ',tag))

Here, we can use 'as' (as center "String").

#

defstruct can have some structure options like: ,type, constructor.
    
    (defstruct (html-process (:type list) 
                (:constructor make-html-process (a b c)))
        a b c)

:type explicitly specifies the representation to be used for the structure. It
can be :vector/list. 

:constructor sepcifies the constructor function name.


