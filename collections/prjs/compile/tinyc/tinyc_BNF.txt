c语言中，>、<之类的运算符优先级高于==、!=运算符。
一元运算符优先级高于二元运算符。
与c语言不同的是，这里的例子赋值表达式没有返回值；if/while中的条件表达式不支持算术
运算符，只支持比较运算符和逻辑运算符，如：
if( xxx && xxx > xxx ) 

selection_statement
	: IF '(' logical_or_expr ')' statement 
	| IF '(' logical_or_expr ')' statement ELSE statement
	;

以上会出现冲突警告，但是yacc生成的代码依然可以正确处理这种歧义性；
可以使用以下方法避免该警告：
%nonassoc IFX
%nonassoc ELSE

语义动作：
term
	: factor {
		/* push left operand */
		emitRM( "ST", ac, tmpOffset--, mp, "push left" );	
	}
会导致以下语句：
write expr生成多余指令：
  9:     ST  0,0(5) 	store value
 10:     LD  0,0(5) 	load id value
 11:     ST  0,0(6) 	push left  //多余指令
 12:    OUT  0,0,0 	write ac

所有包含递归的文法表达式，其生成的代码都把结果放置于mp临时存储区中，使用了递归
文法表达式的地方则需要移除该临时变量；不包含递归的文法表达式则将结果放置于ac寄
存器中。如果递归层次有多层，则只需要压一次临时值，如：
expr : term | expr + term
term : factor | term * factor
expr中的term就无需再压临时值。

递归层次有多层的话，则需要通过这个临时栈来传递结果值：
expr : expr '+' term  {
		/* load right operand to ac1 */
		emitRM( "LD", ac1, ++tmpOffset, mp, "load left" );
		/* load left operand to ac */
		emitRM( "LD", ac, ++tmpOffset, mp, "load right" );
		emitRO( "ADD", ac, ac, ac1, "op +" );
		/* push the result */
		emitRM( "ST", ac, tmpOffset--, mp, "push add result" );
	}

对于关系运算符而言，以下表达式也合法：
a > b > c
文法中也显示了这种左递归特性，但是a>b>c中与c真正做比较的是a和b比较的结果布尔值。

这里对布尔表达式的翻译，0表示false，非0表示true。因此正数和负数效果一样。

为了简单起见，例子中限制了逻辑运算符与算术表达式的运算关系。在c语言中合法的式子：
0 >= !1 在这里不合法，"!'运算符只能作用于布尔表达式，如：
!0 >= 1，这里的"!"作用于表达式 0 >= 1的结果值，而不是0。

同样，例子中==、!=和>、<优先级相同。

对于如下语义动作会产生rule never reduced和shift/reduce conflicts警告：
selection_statement
	: IF '(' logical_or_expr ')' {
		savedLoc1 = emitSkip( 1 );	
	} statement %prec IFX {
		int curLoc = emitSkip( 0 );
		emitBackup( savedLoc1 );	
		emitRM_Abs( "JEQ", ac, curLoc, "if:jmp to else" );
		emitRestore();
	}
去掉 savedLoc1语义动作则无此警告。在if...else中依然存在此警告，并且最终结果错误
，无法正确识别语法。通过添加空的非终结符效果一样：
IF '(' logical_or_expr ')' statement IfStmt ELSE statement
IfStmt : { ... }

不过，可以通过如下修改得到正确结果：
selection_stmt : IF '(' logical_or_expr ')' statement ElseToken statement { ... }
ElseToken : ELSE { ... }

至此，解决if中回填的方式：在logical_or_expr中预留位置，用于条件为假时的跳转指令
，对于有else的if，则通过对ELSE添加动作记录在else前预留位置，用于then-part结束后
的跳转。

while中同样可以运用以上方法：为WHILE添加动作。对于break同样需要回填。

-------------------------------------------------------------------------------
stmt:
	IF expr stmt %prec IFX
	|	IF expr stmt ELSE stmt


statement_list
	: statement
	| statement_list statement
	;

statement
	: compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	;

expression_statement
	: ';'
	| assignment_expr ';'
	;

assignment_expr
	: IDENTIFIER '=' expr
	;

expr
	: expr '+' term  
	| expr '-' term
	;

term
	: term '*' factor
	| term '/' factor
	;

factor
	: '+' primary_expr
	| '-' primary_expr
	;

primary_expr
	: IDENTIFIER
	| NUM
	| '(' expr ')'
	;

compound_statement
	: '{' '}'
	| '{' statement_list '}'
	;

logical_or_expr
	: logical_and_expr
	| logical_or_expr OR_OP logical_and_expr
	;

logical_and_expr
	: logical_not_expr 
	| logical_and_expr AND_OP logical_not_expr
	;

logical_not_expr
	: relational_expr
	| '!' relational_expr
	;

relational_expr
	: expr 
	| '(' logical_or_expr ')'
	| relational_expr '>' expr
	| relational_expr '<' expr
	| relational_expr LE_OP expr
	| relational_expr GE_OP expr
	| relational_expr EQ_OP expr
	| relational_expr NE_OP expr
	;

selection_statement
	: IF '(' logical_or_expr ')' statement
	| IF '(' logical_or_expr ')' statement ELSE statement
	;

iteration_statement
	: WHILE '(' logical_or_expr ')' statement
	;

