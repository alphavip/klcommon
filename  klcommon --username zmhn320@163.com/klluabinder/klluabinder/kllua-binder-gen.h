/// this file was generated by a tiny program.


/// 1 param(s).


template <typename R, typename P1, long id > class lua_binder<R ( P1 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, kl_common::null_type> > func_type; typedef P1 p1_type; enum { param_count = 1 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count ); Private::caller1<result_type, P1>::call( _func, L, p1 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1, long id > typename lua_binder<R ( P1 ), id>::func_type lua_binder<R ( P1 ), id>::_func;

/// 2 param(s).


template <typename R, typename P1,typename P2, long id > class lua_binder<R ( P1,P2 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, kl_common::null_type> > > func_type; typedef P1 p1_type;typedef P2 p2_type; enum { param_count = 2 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) ); Private::caller2<result_type, P1,P2>::call( _func, L, p1,p2 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2, long id > typename lua_binder<R ( P1,P2 ), id>::func_type lua_binder<R ( P1,P2 ), id>::_func;

/// 3 param(s).


template <typename R, typename P1,typename P2,typename P3, long id > class lua_binder<R ( P1,P2,P3 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, kl_common::null_type> > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type; enum { param_count = 3 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) ); Private::caller3<result_type, P1,P2,P3>::call( _func, L, p1,p2,p3 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3, long id > typename lua_binder<R ( P1,P2,P3 ), id>::func_type lua_binder<R ( P1,P2,P3 ), id>::_func;

/// 4 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4, long id > class lua_binder<R ( P1,P2,P3,P4 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, kl_common::null_type> > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type; enum { param_count = 4 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) ); Private::caller4<result_type, P1,P2,P3,P4>::call( _func, L, p1,p2,p3,p4 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4, long id > typename lua_binder<R ( P1,P2,P3,P4 ), id>::func_type lua_binder<R ( P1,P2,P3,P4 ), id>::_func;

/// 5 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5, long id > class lua_binder<R ( P1,P2,P3,P4,P5 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, ::kl_common::type_list<P5, kl_common::null_type> > > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type;typedef P5 p5_type; enum { param_count = 5 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) );p5_type p5 = lua::param_traits<p5_type>::get_param( L, ( 5 - param_count - 1 ) ); Private::caller5<result_type, P1,P2,P3,P4,P5>::call( _func, L, p1,p2,p3,p4,p5 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5, long id > typename lua_binder<R ( P1,P2,P3,P4,P5 ), id>::func_type lua_binder<R ( P1,P2,P3,P4,P5 ), id>::_func;

/// 6 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6, long id > class lua_binder<R ( P1,P2,P3,P4,P5,P6 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, ::kl_common::type_list<P5, ::kl_common::type_list<P6, kl_common::null_type> > > > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type;typedef P5 p5_type;typedef P6 p6_type; enum { param_count = 6 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) );p5_type p5 = lua::param_traits<p5_type>::get_param( L, ( 5 - param_count - 1 ) );p6_type p6 = lua::param_traits<p6_type>::get_param( L, ( 6 - param_count - 1 ) ); Private::caller6<result_type, P1,P2,P3,P4,P5,P6>::call( _func, L, p1,p2,p3,p4,p5,p6 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6, long id > typename lua_binder<R ( P1,P2,P3,P4,P5,P6 ), id>::func_type lua_binder<R ( P1,P2,P3,P4,P5,P6 ), id>::_func;

/// 7 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7, long id > class lua_binder<R ( P1,P2,P3,P4,P5,P6,P7 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, ::kl_common::type_list<P5, ::kl_common::type_list<P6, ::kl_common::type_list<P7, kl_common::null_type> > > > > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type;typedef P5 p5_type;typedef P6 p6_type;typedef P7 p7_type; enum { param_count = 7 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) );p5_type p5 = lua::param_traits<p5_type>::get_param( L, ( 5 - param_count - 1 ) );p6_type p6 = lua::param_traits<p6_type>::get_param( L, ( 6 - param_count - 1 ) );p7_type p7 = lua::param_traits<p7_type>::get_param( L, ( 7 - param_count - 1 ) ); Private::caller7<result_type, P1,P2,P3,P4,P5,P6,P7>::call( _func, L, p1,p2,p3,p4,p5,p6,p7 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7, long id > typename lua_binder<R ( P1,P2,P3,P4,P5,P6,P7 ), id>::func_type lua_binder<R ( P1,P2,P3,P4,P5,P6,P7 ), id>::_func;

/// 8 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8, long id > class lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, ::kl_common::type_list<P5, ::kl_common::type_list<P6, ::kl_common::type_list<P7, ::kl_common::type_list<P8, kl_common::null_type> > > > > > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type;typedef P5 p5_type;typedef P6 p6_type;typedef P7 p7_type;typedef P8 p8_type; enum { param_count = 8 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) );p5_type p5 = lua::param_traits<p5_type>::get_param( L, ( 5 - param_count - 1 ) );p6_type p6 = lua::param_traits<p6_type>::get_param( L, ( 6 - param_count - 1 ) );p7_type p7 = lua::param_traits<p7_type>::get_param( L, ( 7 - param_count - 1 ) );p8_type p8 = lua::param_traits<p8_type>::get_param( L, ( 8 - param_count - 1 ) ); Private::caller8<result_type, P1,P2,P3,P4,P5,P6,P7,P8>::call( _func, L, p1,p2,p3,p4,p5,p6,p7,p8 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8, long id > typename lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8 ), id>::func_type lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8 ), id>::_func;

/// 9 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9, long id > class lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, ::kl_common::type_list<P5, ::kl_common::type_list<P6, ::kl_common::type_list<P7, ::kl_common::type_list<P8, ::kl_common::type_list<P9, kl_common::null_type> > > > > > > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type;typedef P5 p5_type;typedef P6 p6_type;typedef P7 p7_type;typedef P8 p8_type;typedef P9 p9_type; enum { param_count = 9 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) );p5_type p5 = lua::param_traits<p5_type>::get_param( L, ( 5 - param_count - 1 ) );p6_type p6 = lua::param_traits<p6_type>::get_param( L, ( 6 - param_count - 1 ) );p7_type p7 = lua::param_traits<p7_type>::get_param( L, ( 7 - param_count - 1 ) );p8_type p8 = lua::param_traits<p8_type>::get_param( L, ( 8 - param_count - 1 ) );p9_type p9 = lua::param_traits<p9_type>::get_param( L, ( 9 - param_count - 1 ) ); Private::caller9<result_type, P1,P2,P3,P4,P5,P6,P7,P8,P9>::call( _func, L, p1,p2,p3,p4,p5,p6,p7,p8,p9 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9, long id > typename lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9 ), id>::func_type lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9 ), id>::_func;

/// 10 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10, long id > class lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, ::kl_common::type_list<P5, ::kl_common::type_list<P6, ::kl_common::type_list<P7, ::kl_common::type_list<P8, ::kl_common::type_list<P9, ::kl_common::type_list<P10, kl_common::null_type> > > > > > > > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type;typedef P5 p5_type;typedef P6 p6_type;typedef P7 p7_type;typedef P8 p8_type;typedef P9 p9_type;typedef P10 p10_type; enum { param_count = 10 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) );p5_type p5 = lua::param_traits<p5_type>::get_param( L, ( 5 - param_count - 1 ) );p6_type p6 = lua::param_traits<p6_type>::get_param( L, ( 6 - param_count - 1 ) );p7_type p7 = lua::param_traits<p7_type>::get_param( L, ( 7 - param_count - 1 ) );p8_type p8 = lua::param_traits<p8_type>::get_param( L, ( 8 - param_count - 1 ) );p9_type p9 = lua::param_traits<p9_type>::get_param( L, ( 9 - param_count - 1 ) );p10_type p10 = lua::param_traits<p10_type>::get_param( L, ( 10 - param_count - 1 ) ); Private::caller10<result_type, P1,P2,P3,P4,P5,P6,P7,P8,P9,P10>::call( _func, L, p1,p2,p3,p4,p5,p6,p7,p8,p9,p10 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10, long id > typename lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10 ), id>::func_type lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10 ), id>::_func;

/// 11 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10,typename P11, long id > class lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, ::kl_common::type_list<P5, ::kl_common::type_list<P6, ::kl_common::type_list<P7, ::kl_common::type_list<P8, ::kl_common::type_list<P9, ::kl_common::type_list<P10, ::kl_common::type_list<P11, kl_common::null_type> > > > > > > > > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type;typedef P5 p5_type;typedef P6 p6_type;typedef P7 p7_type;typedef P8 p8_type;typedef P9 p9_type;typedef P10 p10_type;typedef P11 p11_type; enum { param_count = 11 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) );p5_type p5 = lua::param_traits<p5_type>::get_param( L, ( 5 - param_count - 1 ) );p6_type p6 = lua::param_traits<p6_type>::get_param( L, ( 6 - param_count - 1 ) );p7_type p7 = lua::param_traits<p7_type>::get_param( L, ( 7 - param_count - 1 ) );p8_type p8 = lua::param_traits<p8_type>::get_param( L, ( 8 - param_count - 1 ) );p9_type p9 = lua::param_traits<p9_type>::get_param( L, ( 9 - param_count - 1 ) );p10_type p10 = lua::param_traits<p10_type>::get_param( L, ( 10 - param_count - 1 ) );p11_type p11 = lua::param_traits<p11_type>::get_param( L, ( 11 - param_count - 1 ) ); Private::caller11<result_type, P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11>::call( _func, L, p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10,typename P11, long id > typename lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11 ), id>::func_type lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11 ), id>::_func;

/// 12 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10,typename P11,typename P12, long id > class lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, ::kl_common::type_list<P5, ::kl_common::type_list<P6, ::kl_common::type_list<P7, ::kl_common::type_list<P8, ::kl_common::type_list<P9, ::kl_common::type_list<P10, ::kl_common::type_list<P11, ::kl_common::type_list<P12, kl_common::null_type> > > > > > > > > > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type;typedef P5 p5_type;typedef P6 p6_type;typedef P7 p7_type;typedef P8 p8_type;typedef P9 p9_type;typedef P10 p10_type;typedef P11 p11_type;typedef P12 p12_type; enum { param_count = 12 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) );p5_type p5 = lua::param_traits<p5_type>::get_param( L, ( 5 - param_count - 1 ) );p6_type p6 = lua::param_traits<p6_type>::get_param( L, ( 6 - param_count - 1 ) );p7_type p7 = lua::param_traits<p7_type>::get_param( L, ( 7 - param_count - 1 ) );p8_type p8 = lua::param_traits<p8_type>::get_param( L, ( 8 - param_count - 1 ) );p9_type p9 = lua::param_traits<p9_type>::get_param( L, ( 9 - param_count - 1 ) );p10_type p10 = lua::param_traits<p10_type>::get_param( L, ( 10 - param_count - 1 ) );p11_type p11 = lua::param_traits<p11_type>::get_param( L, ( 11 - param_count - 1 ) );p12_type p12 = lua::param_traits<p12_type>::get_param( L, ( 12 - param_count - 1 ) ); Private::caller12<result_type, P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12>::call( _func, L, p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10,typename P11,typename P12, long id > typename lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12 ), id>::func_type lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12 ), id>::_func;

/// 13 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10,typename P11,typename P12,typename P13, long id > class lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, ::kl_common::type_list<P5, ::kl_common::type_list<P6, ::kl_common::type_list<P7, ::kl_common::type_list<P8, ::kl_common::type_list<P9, ::kl_common::type_list<P10, ::kl_common::type_list<P11, ::kl_common::type_list<P12, ::kl_common::type_list<P13, kl_common::null_type> > > > > > > > > > > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type;typedef P5 p5_type;typedef P6 p6_type;typedef P7 p7_type;typedef P8 p8_type;typedef P9 p9_type;typedef P10 p10_type;typedef P11 p11_type;typedef P12 p12_type;typedef P13 p13_type; enum { param_count = 13 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) );p5_type p5 = lua::param_traits<p5_type>::get_param( L, ( 5 - param_count - 1 ) );p6_type p6 = lua::param_traits<p6_type>::get_param( L, ( 6 - param_count - 1 ) );p7_type p7 = lua::param_traits<p7_type>::get_param( L, ( 7 - param_count - 1 ) );p8_type p8 = lua::param_traits<p8_type>::get_param( L, ( 8 - param_count - 1 ) );p9_type p9 = lua::param_traits<p9_type>::get_param( L, ( 9 - param_count - 1 ) );p10_type p10 = lua::param_traits<p10_type>::get_param( L, ( 10 - param_count - 1 ) );p11_type p11 = lua::param_traits<p11_type>::get_param( L, ( 11 - param_count - 1 ) );p12_type p12 = lua::param_traits<p12_type>::get_param( L, ( 12 - param_count - 1 ) );p13_type p13 = lua::param_traits<p13_type>::get_param( L, ( 13 - param_count - 1 ) ); Private::caller13<result_type, P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13>::call( _func, L, p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10,typename P11,typename P12,typename P13, long id > typename lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13 ), id>::func_type lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13 ), id>::_func;

/// 14 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10,typename P11,typename P12,typename P13,typename P14, long id > class lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, ::kl_common::type_list<P5, ::kl_common::type_list<P6, ::kl_common::type_list<P7, ::kl_common::type_list<P8, ::kl_common::type_list<P9, ::kl_common::type_list<P10, ::kl_common::type_list<P11, ::kl_common::type_list<P12, ::kl_common::type_list<P13, ::kl_common::type_list<P14, kl_common::null_type> > > > > > > > > > > > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type;typedef P5 p5_type;typedef P6 p6_type;typedef P7 p7_type;typedef P8 p8_type;typedef P9 p9_type;typedef P10 p10_type;typedef P11 p11_type;typedef P12 p12_type;typedef P13 p13_type;typedef P14 p14_type; enum { param_count = 14 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) );p5_type p5 = lua::param_traits<p5_type>::get_param( L, ( 5 - param_count - 1 ) );p6_type p6 = lua::param_traits<p6_type>::get_param( L, ( 6 - param_count - 1 ) );p7_type p7 = lua::param_traits<p7_type>::get_param( L, ( 7 - param_count - 1 ) );p8_type p8 = lua::param_traits<p8_type>::get_param( L, ( 8 - param_count - 1 ) );p9_type p9 = lua::param_traits<p9_type>::get_param( L, ( 9 - param_count - 1 ) );p10_type p10 = lua::param_traits<p10_type>::get_param( L, ( 10 - param_count - 1 ) );p11_type p11 = lua::param_traits<p11_type>::get_param( L, ( 11 - param_count - 1 ) );p12_type p12 = lua::param_traits<p12_type>::get_param( L, ( 12 - param_count - 1 ) );p13_type p13 = lua::param_traits<p13_type>::get_param( L, ( 13 - param_count - 1 ) );p14_type p14 = lua::param_traits<p14_type>::get_param( L, ( 14 - param_count - 1 ) ); Private::caller14<result_type, P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14>::call( _func, L, p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10,typename P11,typename P12,typename P13,typename P14, long id > typename lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14 ), id>::func_type lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14 ), id>::_func;

/// 15 param(s).


template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10,typename P11,typename P12,typename P13,typename P14,typename P15, long id > class lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15 ), id> { public: typedef R result_type; typedef functor<result_type, ::kl_common::type_list<P1, ::kl_common::type_list<P2, ::kl_common::type_list<P3, ::kl_common::type_list<P4, ::kl_common::type_list<P5, ::kl_common::type_list<P6, ::kl_common::type_list<P7, ::kl_common::type_list<P8, ::kl_common::type_list<P9, ::kl_common::type_list<P10, ::kl_common::type_list<P11, ::kl_common::type_list<P12, ::kl_common::type_list<P13, ::kl_common::type_list<P14, ::kl_common::type_list<P15, kl_common::null_type> > > > > > > > > > > > > > > > func_type; typedef P1 p1_type;typedef P2 p2_type;typedef P3 p3_type;typedef P4 p4_type;typedef P5 p5_type;typedef P6 p6_type;typedef P7 p7_type;typedef P8 p8_type;typedef P9 p9_type;typedef P10 p10_type;typedef P11 p11_type;typedef P12 p12_type;typedef P13 p13_type;typedef P14 p14_type;typedef P15 p15_type; enum { param_count = 15 }; public: static int lua_adapter( lua_State *L ) { p1_type p1 = lua::param_traits<p1_type>::get_param( L, -param_count );p2_type p2 = lua::param_traits<p2_type>::get_param( L, ( 2 - param_count - 1 ) );p3_type p3 = lua::param_traits<p3_type>::get_param( L, ( 3 - param_count - 1 ) );p4_type p4 = lua::param_traits<p4_type>::get_param( L, ( 4 - param_count - 1 ) );p5_type p5 = lua::param_traits<p5_type>::get_param( L, ( 5 - param_count - 1 ) );p6_type p6 = lua::param_traits<p6_type>::get_param( L, ( 6 - param_count - 1 ) );p7_type p7 = lua::param_traits<p7_type>::get_param( L, ( 7 - param_count - 1 ) );p8_type p8 = lua::param_traits<p8_type>::get_param( L, ( 8 - param_count - 1 ) );p9_type p9 = lua::param_traits<p9_type>::get_param( L, ( 9 - param_count - 1 ) );p10_type p10 = lua::param_traits<p10_type>::get_param( L, ( 10 - param_count - 1 ) );p11_type p11 = lua::param_traits<p11_type>::get_param( L, ( 11 - param_count - 1 ) );p12_type p12 = lua::param_traits<p12_type>::get_param( L, ( 12 - param_count - 1 ) );p13_type p13 = lua::param_traits<p13_type>::get_param( L, ( 13 - param_count - 1 ) );p14_type p14 = lua::param_traits<p14_type>::get_param( L, ( 14 - param_count - 1 ) );p15_type p15 = lua::param_traits<p15_type>::get_param( L, ( 15 - param_count - 1 ) ); Private::caller15<result_type, P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15>::call( _func, L, p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15 ); if( id > (4096) ) return ::lua_yield( L, lua::return_number_traits<result_type>::count ); else return lua::return_number_traits<result_type>::count; } public: static func_type _func; }; template <typename R, typename P1,typename P2,typename P3,typename P4,typename P5,typename P6,typename P7,typename P8,typename P9,typename P10,typename P11,typename P12,typename P13,typename P14,typename P15, long id > typename lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15 ), id>::func_type lua_binder<R ( P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15 ), id>::_func;

