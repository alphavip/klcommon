/*
	snake game by Kevin Lynx for my own script language 'kl'
	3.24.2009
*/

AREA_WIDTH = 20;
AREA_HEIGHT = 20;
VAL_NONE = 0;
VAL_BODY = 1;
VAL_FOOD = 2;
VAL_WALL = 3;
WIN_WIDTH = 480;
WIN_HEIGHT = 320;
GAME_WIDTH = 320;
GAME_HEIGHT = 320;
TILE_WIDTH = GAME_WIDTH / AREA_WIDTH;
TILE_HEIGHT = GAME_HEIGHT / AREA_HEIGHT;
GS_READY = 0; /* GS_X to identify the state of the game */
GS_RUN = 1;
GS_DIED = 2;
GS_WIN = 3;
DIR_UP = 1; /* the snake move direction */
DIR_DOWN = 2;
DIR_LEFT = 4;
DIR_RIGHT = 8;
QUEUE_MAX = 100; /* queue size */
TIMER_INTER = 300;

game_area;
hge;
sp_body;
sp_wall;
sp_food;
sp_bk;
fnt_info;

last_time; /* the last move time */
time_inter; /* time interval between this moving and last moving */
game_state;

head_x;
head_y;
tail_x;
tail_y;
length;
head_dir;
tail_dir;
queue_ptr;
key; /* a simple input buffer */
dim corner_x[QUEUE_MAX];
dim corner_y[QUEUE_MAX];
dim corner_dir[QUEUE_MAX];

function init()
{
	game_area = tdim_new( AREA_WIDTH, AREA_HEIGHT );
	restart();
	time_inter = TIMER_INTER;
}

function release()
{
	tdim_delete( game_area, AREA_WIDTH );
}

function restart()
{
	key = 0;
	reset_area();
	reset_snake();
	queue_ptr = 0;
}

function reset_area()
{
	for( x = 0; x < AREA_WIDTH; x = x + 1 )
	{
		for( y = 0; y < AREA_HEIGHT; y = y + 1 )
		{
			/* make the around as wall */
			if( x == 0 || x == AREA_WIDTH - 1 ||
					y == 0 || y == AREA_HEIGHT - 1 )
			{
				tdim_set( game_area, x, y, VAL_WALL );
			}
			else
			{
				tdim_set( game_area, x, y, VAL_NONE );
			}
		}
	}
}

function reset_snake()
{
	head_x = AREA_WIDTH / 2 - 1;
	head_y = AREA_HEIGHT / 2 ;
	tail_x = head_x + 2;
	tail_y = head_y;
	length = 3;
	head_dir = DIR_LEFT;
	tail_dir = DIR_LEFT;

	for( x = head_x; x <= tail_x; x = x + 1 )
	{
		tdim_set( game_area, x, head_y, VAL_BODY );
	}
}

function init_hge()
{
	hge = hgeCreate( KLSTATE );
	hgeSys_SetState( hge, 1, 1 ); /* windowed */
	hgeSys_SetState( hge, 4, 0 ); /* use base sound */
	hgeSys_SetState( hge, 6, 0 ); /* not hide mouse */
	hgeSys_SetState( hge, 7, 0 ); /* donot show splash */
	hgeSys_SetState( hge, 17, WIN_WIDTH ); /* screen width */
	hgeSys_SetState( hge, 18, WIN_HEIGHT ); /* screen height */
	hgeSys_SetState( hge, 24, 100 ); /* fixed fps */
	hgeSys_SetState( hge, 29, "snakelog.txt" ); /* log file */
	hgeSys_SetState( hge, 27, "snaky game powed by kl and hge" ); /* window title */
	hgeRandom_Seed( hge, 0 );
	hgeSys_Init( hge );
	load_res(); /* load resource */
	hgeSys_Start( hge );
}

function load_res()
{
	texture = hgeTexture_Load( hge, "res/bg2.png" );
	sp_bk = hgeSprite_Create( texture, 0, 0, WIN_WIDTH, WIN_HEIGHT );
	sp_body = hgeSprite_Create( 0, 0, 0, 16, 16 );
	sp_food = hgeSprite_Create( 0, 0, 0, 16, 16 );
	sp_wall = hgeSprite_Create( 0, 0, 0, 16, 16 );
	fnt_info = hgeFont_Create( "res/sfnt.fnt" );

	hgeSprite_SetColor( sp_body, ARGB( 255, 128, 0, 0 ), -1 );
	hgeSprite_SetColor( sp_food, ARGB( 255, 128, 0, 0 ), -1 );
	hgeSprite_SetColor( sp_wall, ARGB( 255, 128, 0, 0 ), -1 );
}

function free_res()
{
	texture = hgeSprite_GetTexture( sp_bk );
	hgeTexture_Free( hge, texture );
	hgeSprite_Release( sp_bk );
	hgeSprite_Release( sp_body );
	hgeSprite_Release( sp_food );
	hgeSprite_Release( sp_wall );
	hgeFont_Release( fnt_info );
}
	
function release_hge()
{
	free_res();
	hgeSys_Shutdown( hge );
	hgeRelease( hge );
}

function FrameFunc()
{
	if( hgeInput_GetKeyState( hge, 27 ) )
	{
		print( "exit\n" );
		return 1;
	}

	if( game_state == GS_RUN )
	{
		/* player input checking */
		if( hgeInput_GetKeyState( hge, 37 ) ) /* left */
		{
			key = bit_or( key, DIR_LEFT );
		}
		if( hgeInput_GetKeyState( hge, 38 ) ) /* up */
		{
			key = bit_or( key, DIR_UP );
		}
		if( hgeInput_GetKeyState( hge, 39 ) ) /* right */
		{
			key = bit_or( key, DIR_RIGHT );
		}
		if( hgeInput_GetKeyState( hge, 40 ) ) /* down */
		{
			key = bit_or( key, DIR_DOWN );
		}	

		time = hgeTimer_GetTime( hge ) * 1000;
		if( time - last_time >= time_inter )
		{
			last_dir = head_dir;
			if( bit_and( key, DIR_LEFT ) && head_dir != DIR_LEFT && head_dir != DIR_RIGHT )
			{
				head_dir = DIR_LEFT;
			}	
			else if( bit_and( key, DIR_RIGHT ) && head_dir != DIR_LEFT && head_dir != DIR_RIGHT )
			{
				head_dir = DIR_RIGHT;
			}	
			else if( bit_and( key, DIR_DOWN ) && head_dir != DIR_DOWN && head_dir != DIR_UP )
			{
				head_dir = DIR_DOWN;
			}	
			else if( bit_and( key, DIR_UP ) && head_dir != DIR_DOWN && head_dir != DIR_UP )
			{
				head_dir = DIR_UP;
			}	
	
			key = 0; /* clear the input buffer */
			if( last_dir != head_dir )
			{
				/* direction has been changed */
				head_dir_add( head_x, head_y, head_dir );
			}
			/* our snakey will move */
			snake_move();	
			last_time = time;
		}
	}
	else if( game_state == GS_DIED )
	{
		if( hgeInput_GetKeyState( hge, 13 ) )
		{
			time_inter = TIMER_INTER;
			restart();	
			create_food();
			game_state = GS_RUN;
		}
	}
	else if( game_state == GS_WIN )
	{
		if( hgeInput_GetKeyState( hge, 13 ) )
		{
			restart();
			game_state = GS_RUN;
			create_food();
		}
	}
	else if( game_state == GS_READY )
	{
		if( hgeInput_GetKeyState( hge, 13 ) )
		{
			game_state = GS_RUN;
			create_food();
			time_inter = TIMER_INTER;
		}
	}
	return 0;
}

function snake_move()
{
	if( head_dir == DIR_UP )
	{
		head_y = head_y - 1;
	}
	else if( head_dir == DIR_DOWN )
	{
		head_y = head_y + 1;
	}
	else if( head_dir == DIR_LEFT )
	{
		head_x = head_x - 1;
	}
	else if( head_dir == DIR_RIGHT )
	{
		head_x = head_x + 1;
	}

	/* collection check */
	r = col_check();
	if( r == -1 )
	{
		print( "died\n" );
		game_state = GS_DIED;
	}
	else if( r == 1 )
	{
		/* eat food */
		length = length + 1;
		if( length > 10 )
		{
			if( time_inter > 50 )
			{
				/* speed up */
				time_inter = time_inter - 50;
				print( "speed up " + time_inter + "\n" );
			}
			else
			{
				time_inter = TIMER_INTER;
			}
			game_state = GS_WIN;	
		}
	}
	else
	{
		/* move the tail */
		tdim_set( game_area, tail_x, tail_y, VAL_NONE );

		if( tail_dir == DIR_UP )
		{
			tail_y = tail_y - 1;
		}
		else if( tail_dir == DIR_DOWN )
		{
			tail_y = tail_y + 1;
		}
		else if( tail_dir == DIR_LEFT )
		{
			tail_x = tail_x - 1;
		}
		else if( tail_dir == DIR_RIGHT )
		{
			tail_x = tail_x + 1;
		}

		/* tail direction checking */
		dir = tail_dir_check( tail_x, tail_y );
		if( dir != -1 )
		{
			tail_dir = dir;
		}
	}

	tdim_set( game_area, head_x, head_y, VAL_BODY );
	if( r == 1 )
	{
		/* create new food */
		create_food();
	}
}

function col_check()
{
	v = tdim_get( game_area, head_x, head_y );
	if( v == VAL_BODY || v == VAL_WALL )
	{
		/* died */
		return -1;
	}
	else if( v == VAL_FOOD )
	{
		/* grow up */
		return 1;
	}

	return 0;
}

/* this function will pop the queue */
function tail_dir_check( x, y )
{
	if( queue_ptr <= 0 )
	{
		/* donot change direction */
		return -1;
	}

	if( x == corner_x[0] && y == corner_y[0] )
	{
		dir = corner_dir[0];
		adjust_queue();
		return dir;
	}

	return -1;
}

function adjust_queue()
{
	if( queue_ptr == 1 )
	{
		/* do nothing */
	}
	else if( queue_ptr == 2 )
	{
		corner_x[0] = corner_x[1];
		corner_y[0] = corner_y[1];
		corner_dir[0] = corner_dir[1];
	}
	else
	{
		for( i = 0; i < queue_ptr - 1; i = i + 1 )
		{
			corner_x[i] = corner_x[i+1];
			corner_y[i] = corner_y[i+1];
			corner_dir[i] = corner_dir[i+1];
		}
	}

	queue_ptr = queue_ptr - 1;
}

/* this function will push element in the queue */
function head_dir_add( x, y, dir )
{
	if( queue_ptr >= QUEUE_MAX )
	{
		print( "fatal error : the queue is full!\n" );
	}
	else 
	{
		corner_x[queue_ptr] = x;
		corner_y[queue_ptr] = y;
		corner_dir[queue_ptr] = dir;
		queue_ptr = queue_ptr + 1;
	}
}

function create_food()
{
	while( 1 )
	{
		x = hgeRandom_Float( hge, 1, AREA_WIDTH - 2 );
		y = hgeRandom_Float( hge, 1, AREA_HEIGHT - 2 );
		if( tdim_get( game_area, x, y ) == VAL_NONE )
		{
			tdim_set( game_area, x, y, VAL_FOOD );
			break;
		}
	}
}

function RenderFunc()
{
	hgeGfx_BeginScene( hge );
	hgeGfx_Clear( hge, 0 );
	
	hgeSprite_Render( sp_bk, 0, 0 );
	render_area();
	
	if( game_state == GS_READY )
	{
		hgeFont_Render( fnt_info, WIN_WIDTH / 2, 40, 2, "Press 'Enter' to play." );
	}
	else if( game_state == GS_DIED )
	{
		hgeFont_Render( fnt_info, WIN_WIDTH / 2, 40, 2, "God damn it." );
	}
	else if( game_state == GS_WIN )
	{
		hgeFont_Render( fnt_info, WIN_WIDTH / 2, 40, 2, "You WIN." );
	}

	hgeGfx_EndScene( hge );
	return 0;
}

function render_area()
{
	start_x = ( WIN_WIDTH - GAME_WIDTH ) / 2;
	start_y = ( WIN_HEIGHT - GAME_HEIGHT ) / 2;
	for( y = 0; y < AREA_HEIGHT; y = y + 1 )
	{
		for( x = 0; x < AREA_WIDTH; x = x + 1 )
		{
			v = tdim_get( game_area, x, y );
			if( v == VAL_WALL )
			{
				hgeSprite_Render( sp_wall, start_x + x * TILE_WIDTH, 
						start_y + y * TILE_HEIGHT );
			}
			else if( v == VAL_BODY )
			{
				hgeSprite_Render( sp_body, start_x + x * TILE_WIDTH, 
						start_y + y * TILE_HEIGHT );
			}
			else if( v == VAL_FOOD )
			{
				hgeSprite_Render( sp_food, start_x + x * TILE_WIDTH, 
						start_y + y * TILE_HEIGHT );
			}
		}
	}
}

function main()
{
	import( KLSTATE, "2dim_plugin.dll" );
	import( KLSTATE, "hge_plugin.dll" );

	init();
	init_hge();

	release_hge();
	release();
}

