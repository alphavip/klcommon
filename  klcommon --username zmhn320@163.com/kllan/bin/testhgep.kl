/*
   test.kl
*/

hge;
hgesprite;
hgesprite_bk;
texture_bk;
hgefont;
texture;
speed;
friction;
x;
y;
dx;
dy;

function init()
{
	speed = 90;
	friction = 0.98;
	x = 100;
	y = 100;
	dx = 0;
	dy = 0;
}

function main()
{
	import( KLSTATE, "hge_plugin.dll" );
	hge = hgeCreate( KLSTATE );
	hgeSys_SetState( hge, 1, 1 ); /* windowed */
	hgeSys_SetState( hge, 4, 0 ); /* use base sound */
	hgeSys_SetState( hge, 6, 0 ); /* not hide mouse */
	hgeSys_SetState( hge, 7, 0 ); /* donot show splash */
	hgeSys_SetState( hge, 17, 800 ); /* screen width */
	hgeSys_SetState( hge, 18, 600 ); /* screen height */
	hgeSys_SetState( hge, 24, 100 ); /* fixed fps */
	hgeSys_SetState( hge, 29, "hgelog.txt" ); /* log file */
	hgeSys_SetState( hge, 27, "kl script hge by kevin lynx" ); /* window title */
	hgeSys_Init( hge );
	load_res( hge );
	init();
	hgeSys_Start( hge );
	free_res( hge );
	hgeSys_Shutdown( hge );
	hgeRelease( hge );
}

function load_res( hge )
{
	texture = hgeTexture_Load( hge, "res/particles.png" );
	hgesprite = hgeSprite_Create( texture, 96, 64, 32, 32 );	
	hgeSprite_SetColor( hgesprite, ARGB( 255, 255, 160, 0 ), -1 );
	hgeSprite_SetHotSpot( hgesprite, 16, 16 );
	hgefont = hgeFont_Create( "res/font.fnt" );

	texture_bk = hgeTexture_Load( hge, "res/bg2.png" );
	hgesprite_bk = hgeSprite_Create( texture_bk, 0, 0, 800, 600 );  
	hgeSprite_SetColor( hgesprite_bk, ARGB( 255, 255, 255, 255 ), 0 );
	hgeSprite_SetColor( hgesprite_bk, ARGB( 255, 180, 180, 180 ), 1 );
	hgeSprite_SetColor( hgesprite_bk, ARGB( 255, 0, 0, 64 ), 2 );
	hgeSprite_SetColor( hgesprite_bk, ARGB( 255, 0, 0, 64 ), 3 );
}

function free_res( hge )
{
	hgeTexture_Free( hge, texture );
	hgeSprite_Release( hgesprite );
	hgeFont_Release( hgefont );
	hgeTexture_Free( hge, texture_bk );
	hgeSprite_Release( hgesprite_bk );
}

function RenderFunc()
{
	hgeGfx_BeginScene( hge );
	hgeGfx_Clear( hge, 0 );
	
	hgeSprite_Render( hgesprite_bk, 0, 0 );
	hgeSprite_Render( hgesprite, x, y );
	hgeFont_Render( hgefont, 5, 5, 0, "dt:" + hgeTimer_GetDelta( hge ) );
	hgeFont_Render( hgefont, 5, 25, 0, "press left/right/up/down key." );

	hgeGfx_EndScene( hge );
	return 0;
}

function FrameFunc()
{
	dt = hgeTimer_GetDelta( hge );
	if( hgeInput_GetKeyState( hge, 27 ) )
	{
		print( "esc pressed, exit.\n" );
		return 1;
	}
	if( hgeInput_GetKeyState( hge, 37 ) ) /* left */
	{
		dx = dx - speed * dt;
	}
	if( hgeInput_GetKeyState( hge, 38 ) ) /* up */
	{
		dy = dy - speed * dt;
	}
	if( hgeInput_GetKeyState( hge, 39 ) ) /* right */
	{
		dx = dx + speed * dt;
	}
	if( hgeInput_GetKeyState( hge, 40 ) ) /* down */
	{
		dy = dy + speed * dt;
	}
	dx = dx * friction;
	dy = dy * friction;
	x = x + dx;
	y = y + dy;
	
	if( x > 784 )
	{
		x = 784 - ( x - 784 );
		dx = -dx;
	}
	if( x < 16 )
	{
		x = 16 + 16 - x;
		dx = -dx;
	}
	if( y > 584 )
	{
		y = 584 - ( y - 584 );
		dy = -dy;
	}
	if( y < 16 )
	{
		y = 16 + 16 - y;
		dy = -dy;
	}

	return 0;
}

